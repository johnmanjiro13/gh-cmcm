// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comment "github.com/johnmanjiro13/gh-cmcm/pkg/comment"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockClient) CreateComment(ctx context.Context, sha, body string, opt *comment.CreateOption) (*comment.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, sha, body, opt)
	ret0, _ := ret[0].(*comment.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockClientMockRecorder) CreateComment(ctx, sha, body, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClient)(nil).CreateComment), ctx, sha, body, opt)
}

// DeleteComment mocks base method.
func (m *MockClient) DeleteComment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockClientMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockClient)(nil).DeleteComment), ctx, id)
}

// GetComment mocks base method.
func (m *MockClient) GetComment(ctx context.Context, id int64) (*comment.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, id)
	ret0, _ := ret[0].(*comment.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockClientMockRecorder) GetComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockClient)(nil).GetComment), ctx, id)
}

// ListComment mocks base method.
func (m *MockClient) ListComment(ctx context.Context, sha string, perPage int) ([]*comment.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComment", ctx, sha, perPage)
	ret0, _ := ret[0].([]*comment.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComment indicates an expected call of ListComment.
func (mr *MockClientMockRecorder) ListComment(ctx, sha, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComment", reflect.TypeOf((*MockClient)(nil).ListComment), ctx, sha, perPage)
}

// UpdateComment mocks base method.
func (m *MockClient) UpdateComment(ctx context.Context, id int64, body string) (*comment.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, id, body)
	ret0, _ := ret[0].(*comment.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockClientMockRecorder) UpdateComment(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockClient)(nil).UpdateComment), ctx, id, body)
}
